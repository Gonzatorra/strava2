//Es la manera en la que he intentado cambiar el UsuarioService de esta clase, pero no ha funcionado:
package com.strava.servicios;

import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;

import javax.swing.JOptionPane;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.strava.DTO.*;
import com.strava.assembler.*;
import com.strava.dominio.*;

@Service
public class UsuarioServicePrueba {

	private final UsuarioRepository usuarioRepository;
	private static UsuarioServicePrueba instancia;
	
	@Autowired
    public UsuarioServicePrueba(UsuarioRepository usuarioRepository) {
        this.usuarioRepository = usuarioRepository;
        instancia = this; 
        System.out.println("UsuarioService (Strava) inicializado, usando JPA DB.");
    }

    public UsuarioDTO registrar(String username, String contrasena,
            String email, String nombre, String proveedor) {
    	Optional<Usuario> existing = usuarioRepository.findByUsername(username);
    	if (existing.isPresent()) {
    			System.out.println("Usuario ya existe: " + username);
				return null;
    	}

    	Usuario nuevo = new Usuario();
    	//ID autogenerado po rl @GeneratedValue
    	nuevo.setUsername(username);
    	nuevo.setContrasena(contrasena);
    	nuevo.setEmail(email);
    	nuevo.setNombre(nombre);
    	nuevo.setProveedor(proveedor);

    	Usuario saved = usuarioRepository.save(nuevo);
    	System.out.println("Usuario registrado: " + saved.getUsername());

    	return UsuarioAssembler.toDTO(saved);
    }

    public UsuarioDTO login(String username, String contrasena) {
        Optional<Usuario> found = usuarioRepository.findByUsername(username);
        if (!found.isPresent()) {
            System.out.println("Login fallido para: " + username + " (no existe)");
            return null;
        }
        Usuario u = found.get();
        if (!u.getContrasena().equals(contrasena)) {
            System.out.println("Login fallido para: " + username + " (contraseña inválida)");
            return null;
        }
        // Success
        System.out.println("Login exitoso para: " + username);
        return UsuarioAssembler.toDTO(u);
    }

    public void logout(String token) {
        if (token == null) {
            System.out.println("el Token es nulo, no se puede hacer logout.");
            return;
        }
        Optional<Usuario> found = usuarioRepository.findByToken(token);
        if (found.isPresent()) {
            Usuario u = found.get();
            u.setToken(null);
            usuarioRepository.save(u);
            System.out.println("Usuario desconectado (token eliminado) para " + u.getUsername());
        } else {
            System.out.println("Token no encontrado: " + token);
        }
    }


    public void eliminarUsuario(UsuarioDTO usuarioDTO) {
        if (usuarioDTO == null) return;
        Optional<Usuario> found = usuarioRepository.findById(usuarioDTO.getId());
        if (found.isPresent()) {
            usuarioRepository.delete(found.get());
            System.out.println("Usuario eliminado: " + usuarioDTO.getUsername());
        }
    }

    //Usuario Service
    public void actualizarUsuario(UsuarioDTO usuarioDTO) {
        if (usuarioDTO == null) return;
        Optional<Usuario> found = usuarioRepository.findById(usuarioDTO.getId());
        if (!found.isPresent()) {
            System.out.println("Usuario no encontrado para actualizar: " + usuarioDTO.getUsername());
            return;
        }
        Usuario entity = found.get();
        entity.setUsername(usuarioDTO.getUsername());
        entity.setEmail(usuarioDTO.getEmail());
        entity.setContrasena(usuarioDTO.getContrasena());
        entity.setNombre(usuarioDTO.getNombre());
        entity.setPeso(usuarioDTO.getPeso());
        entity.setAltura(usuarioDTO.getAltura());
        entity.setfNacimiento(usuarioDTO.getfNacimiento());

        usuarioRepository.save(entity);
        System.out.println("Usuario actualizado: " + entity.getUsername());
    }

    public UsuarioDTO obtenerUsuarioPorNombre(String username) {
        Optional<Usuario> found = usuarioRepository.findByUsername(username);
        if (!found.isPresent()) {
            return null;
        }
        return UsuarioAssembler.toDTO(found.get());
    }


    public void registrarUsuario(UsuarioDTO usuarioDTO) {
        if (usuarioDTO == null) return;
        Optional<Usuario> existing = usuarioRepository.findByUsername(usuarioDTO.getUsername());
        if (existing.isPresent()) {
            throw new IllegalArgumentException("Usuario ya existe: " + usuarioDTO.getUsername());
        }
        Usuario entity = new Usuario();
        entity.setUsername(usuarioDTO.getUsername());
        entity.setContrasena(usuarioDTO.getContrasena());
        entity.setEmail(usuarioDTO.getEmail());
        entity.setNombre(usuarioDTO.getNombre());
        entity.setProveedor(usuarioDTO.getProveedor());
        entity.setPeso(usuarioDTO.getPeso());
        entity.setAltura(usuarioDTO.getAltura());
        entity.setfNacimiento(usuarioDTO.getfNacimiento());

        usuarioRepository.save(entity);
        System.out.println("Usuario registrado con DTO: " + entity.getUsername());
    }



    public HashMap<Integer, UsuarioDTO> getUsuarios() {
        List<Usuario> all = usuarioRepository.findAll();
        HashMap<Integer, UsuarioDTO> map = new HashMap<>();
        for (Usuario u : all) {
            UsuarioDTO dto = UsuarioAssembler.toDTO(u);
            map.put(dto.getId(), dto);
        }
        return map;
    }

    public void setUsuarios(HashMap<Integer, UsuarioDTO> newMap) {
        usuarioRepository.deleteAll();

        for (UsuarioDTO dto : newMap.values()) {
            Usuario entity = UsuarioAssembler.toDomain(dto);
            usuarioRepository.save(entity);
        }
        System.out.println("Se han sobrescrito los usuarios en la DB con " + newMap.size() + " usuarios.");
    }

    public List<Integer> getAmigos(UsuarioDTO usuario) {
        return usuario.getAmigos(); 
    }
    /*
    public static UsuarioService getInstancia() {
        if (instancia == null) {
            instancia = new UsuarioService();
        }
        return instancia;
    }*/
    public static UsuarioServicePrueba getInstancia() {
        return instancia;
    }


    /*
    public Map<Integer, Float> calcularProgreso(UsuarioDTO usuarioDTO) throws RemoteException {
        Map<Integer, Float> progresoPorReto = new HashMap<>();

        // Obtener retos y entrenamientos del usuario
        HashMap<RetoDTO, String> retos = usuarioDTO.getRetos();  // Map<Reto, Estado>
        List<EntrenamientoDTO> entrenamientos = usuarioDTO.getEntrenamientos();

        // Iterar sobre los retos
        for (RetoDTO reto : retos.keySet()) {
            double totalDistancia = 0;
            double totalDuracion = 0;

            // Filtrar entrenamientos relevantes basados en las fechas y el deporte del reto
            for (EntrenamientoDTO entrenamiento : entrenamientos) {
                if (entrenamiento.getDeporte().equalsIgnoreCase(reto.getDeporte())
                        && !entrenamiento.getFecIni().isBefore(reto.getFecIni().toLocalDate())
                        && !entrenamiento.getFecIni().isAfter(reto.getFecFin().toLocalDate())) {

                    totalDistancia += entrenamiento.getDistancia();
                    totalDuracion += entrenamiento.getDuracion();
                }
            }

            // Calcular el progreso basado en el objetivo de distancia y tiempo
            float progresoDistancia = (reto.getObjetivoDistancia() > 0)
                    ? (float) (totalDistancia / reto.getObjetivoDistancia()) * 100
                    : 0;

            float progresoTiempo = (reto.getObjetivoTiempo() > 0)
                    ? (float) (totalDuracion / reto.getObjetivoTiempo()) * 100
                    : 0;

            // Combina progreso de distancia y tiempo, eligiendo el valor más realista
            float progreso = Math.min(100, Math.max(progresoDistancia, progresoTiempo));

            // Almacenar progreso en el mapa
            progresoPorReto.put(reto.getId(), progreso);
        }

        return progresoPorReto;
    }*/
    
    
    public Map<Integer, Float> calcularProgreso(UsuarioDTO usuarioDTO) throws RemoteException {

    	HashMap<RetoDTO, String> retos = usuarioDTO.getRetos(); 
    	List<EntrenamientoDTO> entrenamientos = usuarioDTO.getEntrenamientos();

    	Map<Integer, Float> progresoPorReto = new HashMap<>();

    	for (RetoDTO reto : retos.keySet()) {
        	double totalDistancia = 0.0;
        	double totalDuracion = 0.0;

        	for (EntrenamientoDTO ent : entrenamientos) {
            	if (ent.getDeporte().equalsIgnoreCase(reto.getDeporte())
                	&& !ent.getFecIni().isBefore(reto.getFecIni().toLocalDate())
                	&& !ent.getFecIni().isAfter(reto.getFecFin().toLocalDate())) {
                
                	totalDistancia += ent.getDistancia();
                	totalDuracion  += ent.getDuracion();
            	}
        	}

        	float progresoDistancia = (reto.getObjetivoDistancia() > 0)
            	? (float) (totalDistancia / reto.getObjetivoDistancia()) * 100
            	: 0f;
        	float progresoTiempo = (reto.getObjetivoTiempo() > 0)
            	? (float) (totalDuracion / reto.getObjetivoTiempo()) * 100
            	: 0f;
        	float progreso = Math.min(100, Math.max(progresoDistancia, progresoTiempo));

        	progresoPorReto.put(reto.getId(), progreso);
    	}

    	return progresoPorReto;
	}

}
